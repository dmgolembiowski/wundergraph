---
source: wundergraph_cli/src/print_schema/mod.rs
expression: "&s"
---
use wundergraph::query_builder::types::{HasMany, HasOne};
use wundergraph::scalar::WundergraphScalarValue;
use wundergraph::WundergraphEntity;

table! {
    infer_test.comments (id) {
        id -> Int4,
        post -> Nullable<Int4>,
        commenter -> Nullable<Int4>,
        content -> Text,
    }
}

table! {
    infer_test.posts (id) {
        id -> Int4,
        author -> Nullable<Int4>,
        title -> Text,
        content -> Nullable<Text>,
    }
}

table! {
    infer_test.users (id) {
        id -> Int4,
        name -> Text,
    }
}

allow_tables_to_appear_in_same_query!(
    comments,
    posts,
    users,
);


#[derive(Clone, Debug, Identifiable, WundergraphEntity)]
#[table_name = "comments"]
#[primary_key(id)]
pub struct Comment {
    id: i32,
    post: Option<HasOne<i32, Post>>,
    commenter: Option<HasOne<i32, User>>,
    content: String,
}

#[derive(Clone, Debug, Identifiable, WundergraphEntity)]
#[table_name = "posts"]
#[primary_key(id)]
pub struct Post {
    id: i32,
    author: Option<HasOne<i32, User>>,
    title: String,
    content: Option<String>,
    comments: HasMany<Comment, comments::post>,
}

#[derive(Clone, Debug, Identifiable, WundergraphEntity)]
#[table_name = "users"]
#[primary_key(id)]
pub struct User {
    id: i32,
    name: String,
    comments: HasMany<Comment, comments::commenter>,
    posts: HasMany<Post, posts::author>,
}



wundergraph::query_object!{
    Query {
        Comment,
        Post,
        User,
    }
}


#[derive(Insertable, juniper::GraphQLInputObject, Clone, Debug)]
#[graphql(scalar = "WundergraphScalarValue")]
#[table_name = "comments"]
pub struct NewComment {
    post: Option<i32>,
    commenter: Option<i32>,
    content: String,
}

#[derive(AsChangeset, Identifiable, juniper::GraphQLInputObject, Clone, Debug)]
#[graphql(scalar = "WundergraphScalarValue")]
#[table_name = "comments"]
#[primary_key(id)]
pub struct CommentChangeset {
    id: i32,
    post: Option<i32>,
    commenter: Option<i32>,
    content: String,
}

#[derive(Insertable, juniper::GraphQLInputObject, Clone, Debug)]
#[graphql(scalar = "WundergraphScalarValue")]
#[table_name = "posts"]
pub struct NewPost {
    author: Option<i32>,
    title: String,
    content: Option<String>,
}

#[derive(AsChangeset, Identifiable, juniper::GraphQLInputObject, Clone, Debug)]
#[graphql(scalar = "WundergraphScalarValue")]
#[table_name = "posts"]
#[primary_key(id)]
pub struct PostChangeset {
    id: i32,
    author: Option<i32>,
    title: String,
    content: Option<String>,
}

#[derive(Insertable, juniper::GraphQLInputObject, Clone, Debug)]
#[graphql(scalar = "WundergraphScalarValue")]
#[table_name = "users"]
pub struct NewUser {
    name: String,
}

#[derive(AsChangeset, Identifiable, juniper::GraphQLInputObject, Clone, Debug)]
#[graphql(scalar = "WundergraphScalarValue")]
#[table_name = "users"]
#[primary_key(id)]
pub struct UserChangeset {
    id: i32,
    name: String,
}

wundergraph::mutation_object!{
    Mutation{
        Comment(insert = NewComment, update = CommentChangeset, ),
        Post(insert = NewPost, update = PostChangeset, ),
        User(insert = NewUser, update = UserChangeset, ),
    }
}


