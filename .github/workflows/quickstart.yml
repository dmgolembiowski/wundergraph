on: [pull_request]

name: Quickstart

jobs:
  check_and_test:
    name: Check
    strategy:
      matrix:
        rust: ["1.38.0", "stable", "beta", "nightly"]
        backend: ["postgres", "sqlite"]
        os: [ubuntu-18.04, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v1
      - name: Set environment variables
        shell: bash
        if: matrix.backend == 'postgres'
        run: |
          echo '::set-env name=DATABASE_URL::postgres://postgres:postgres@localhost/wundergraph_test'

      - name: Set environment variables
        shell: bash
        if: matrix.backend == 'sqlite'
        run: |
          echo '::set-env name=DATABASE_URL::./test.db'
          echo '::set-env name=RUST_TEST_THREADS::1'

      - name: Install libpq (Linux)
        if: runner.os == 'Linux' && matrix.backend == 'postgres'
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev postgresql
          echo "host    all             all             127.0.0.1/32            md5" > sudo tee -a /etc/postgresql/9.5/main/pg_hba.conf
          sudo service postgresql restart && sleep 3
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
          sudo -u postgres psql -c "CREATE DATABASE wundergraph_test WITH OWNER = 'postgres';"
          sudo service postgresql restart && sleep 3

      - name: Install sqlite (Linux)
        if: runner.os == 'Linux' && matrix.backend == 'sqlite'
        run: sudo apt-get update && sudo apt-get install -y libsqlite3-dev sqlite3

      - name: Install libpq (MacOs)
        if: runner.os == 'macOS' && matrix.backend == 'postgres'
        run: |
          brew update
          brew install postgres
          /usr/local/opt/postgres/bin/pg_ctl -D /usr/local/var/postgres start
          sleep 3
          /usr/local/opt/postgres/bin/createuser -s postgres
          /usr/local/opt/postgres/bin/createdb wundergraph_test -O postgres
          /usr/local/opt/postgres/bin/psql -c  "ALTER USER postgres PASSWORD 'postgres';" wundergraph_test

      - name: Install sqlite (MacOS)
        if: runner.os == 'macOS' && matrix.backend == 'sqlite'
        run: |
          brew update &&
          brew install sqlite

      - name: Install sqlite (Windows)
        if: runner.os == 'Windows' && matrix.backend == 'sqlite'
        shell: cmd
        run: |
          choco install sqlite
          cd /D C:\ProgramData\chocolatey\lib\SQLite\tools
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          lib /machine:x64 /def:sqlite3.def /out:sqlite3.lib
          echo '::add-path::C:\ProgramData\chocolatey\lib\SQLite\tools'
          echo ::set-env name=SQLITE3_LIB_DIR::C:\ProgramData\chocolatey\lib\SQLite\tools
          echo '%SQLITE3_LIB_DIR%'

      - name: Install libpq (Windows)
        if: runner.os == 'Windows' && matrix.backend == 'postgres'
        shell: cmd
        run: |
          choco install postgresql10 --force --params '/Password:postgres'
          echo '::add-path::C:\Program Files\PostgreSQL\10\bin'
          echo '::add-path::C:\Program Files\PostgreSQL\10\lib'
          echo '::set-env name=PQ_LIB_DIR::C:\Program Files\PostgreSQL\10\lib'
          echo '%PQ_LIB_DIR%'
          echo '%PATH%'

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Run cargo check for wundergraph_derive
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path wundergraph_derive/Cargo.toml --features "${{ matrix.backend }}"

      - name: Run cargo check for wundergraph
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path wundergraph/Cargo.toml --features "${{ matrix.backend }}"

      - name: Run cargo check for wundergraph_example
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path wundergraph_example/Cargo.toml --features "${{ matrix.backend }}" --no-default-features

      - name: Run cargo check for wundergraph_bench
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path wundergraph_bench/Cargo.toml --features "${{ matrix.backend }}" --no-default-features

      - name: Run cargo check for wundergraph_cli
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path wundergraph_cli/Cargo.toml --features "${{ matrix.backend }}" --no-default-features

      - name: Run cargo test for wundergraph
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path wundergraph/Cargo.toml --features "${{ matrix.backend }} wundergraph_example/${{ matrix.backend }} wundergraph_bench/${{ matrix.backend }}" --no-default-features

      - name: Run test check for wundergraph_cli
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path wundergraph_cli/Cargo.toml --features "${{ matrix.backend }}" --no-default-features

  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: 1.38.0
            components: clippy
            override: true
      - uses: actions-rs/clippy-check@v1
        name: Clippy wundergraph_derive
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --manifest-path wundergraph_derive/Cargo.toml --features "postgres sqlite"
      - uses: actions-rs/clippy-check@v1
        name: Clippy wundergraph
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --manifest-path wundergraph/Cargo.toml --features "postgres sqlite"
      - uses: actions-rs/clippy-check@v1
        name: Clippy wundergraph_cli
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --manifest-path wundergraph_cli/Cargo.toml --features "postgres sqlite"
